public class Main {
    public static void main(String[] args) {
        String str = "1234 aasddf"; //строка для примера
        System.out.println(myAtoi(str));
    }

    public static int myAtoi(String s) { //метод, который преобразовывает(конвертирует) строку в число с учетом знака + или -
        s = s.trim(); //с помощью метода trim() удаляем все пробелы в начале и в конце строки
        if (s.isEmpty()) { //если строка пустая
            return 0; //возвращаем ноль
        }
        int sign = 1; //переменная для знака "+"
        int index = 0; //переменная-индекс элемента
        if (s.charAt(index) == '+' || s.charAt(index) == '-') { //проверяем строку на наличие знака "+" или "-"
            sign = s.charAt(index) == '+' ? 1 : -1; //если плюс - то = 1, если минус - то = -1
            index++; //увеличиваем индекс на 1
        }
        int result = 0; //создаем целочисленную переменную для отображения результата метода
        while (index < s.length() && Character.isDigit(s.charAt(index))) { //выполняем цикл, пока индекс меньше длины строки и
            //элемент строки является цифрой (иначе цикл останавливается)
            int digit = Character.getNumericValue(s.charAt(index)); //извлекаем символ из строки s по индексу index, затем
            // преобразует его в числовое значение типа int с помощью метода Character.getNumericValue()
            if (result > (Integer.MAX_VALUE - digit) / 10) { //этот блок if проверяет, не превышает ли текущий результат значения
                // Integer.MAX_VALUE или Integer.MIN_VALUE (в зависимости от знака) после добавления следующей цифры из строки. Это
                // делается, чтобы избежать переполнения, которое может произойти, если результат превысит максимальное или минимальное
                // значение типа Integer. Если условие выполняется, то функция возвращает Integer.MAX_VALUE или Integer.MIN_VALUE
                // (в зависимости от знака), иначе выполнение продолжается.
                return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE; //если результат превышает максимально возможное значение
                // типа Integer, то функция возвращает соответствующее значение в зависимости от знака числа (1 - положительное
                // число, -1 - отрицательное число).
            }
            result = result * 10 + digit; //происходит добавление следующей цифры к текущему результату. Поскольку в Java целочисленное
            // деление отбрасывает дробную часть, то (Integer.MAX_VALUE - digit) / 10 дает максимально возможное значение, которое
            // можно добавить к текущему результату без переполнения.
            index++; //увеличиваем индекс на 1
        }
        return result * sign; //возвращаем число с учетом знака (* sign)
    }
}